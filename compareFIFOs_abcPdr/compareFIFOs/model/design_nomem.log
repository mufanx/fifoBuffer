
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12 (git sha1 UNKNOWN, clang 13.0.0 -fPIC -Os)


-- Executing script file `../model/design_nomem.ys' --

1. Executing Verilog-2005 frontend: compareFIFOs.sv
Parsing SystemVerilog input from `compareFIFOs.sv' to AST representation.
Storing AST representation for module `$abstract\srFIFO'.
Storing AST representation for module `$abstract\rbFIFO'.
Storing AST representation for module `$abstract\compareFIFOs'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ResetCounter.sv
Parsing SystemVerilog input from `ResetCounter.sv' to AST representation.
Storing AST representation for module `$abstract\ResetCounter'.
Successfully finished Verilog frontend.

3. Executing PREP pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\compareFIFOs'.
Generating RTLIL representation for module `\compareFIFOs'.

3.2.1. Analyzing design hierarchy..
Top module:  \compareFIFOs

3.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\rbFIFO'.
Generating RTLIL representation for module `\rbFIFO'.

3.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\srFIFO'.
Generating RTLIL representation for module `\srFIFO'.

3.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\ResetCounter'.
Generating RTLIL representation for module `\ResetCounter'.

3.2.5. Analyzing design hierarchy..
Top module:  \compareFIFOs
Used module:     \rbFIFO
Used module:     \srFIFO
Used module:     \ResetCounter

3.2.6. Analyzing design hierarchy..
Top module:  \compareFIFOs
Used module:     \rbFIFO
Used module:     \srFIFO
Used module:     \ResetCounter
Removing unused module `$abstract\ResetCounter'.
Removing unused module `$abstract\compareFIFOs'.
Removing unused module `$abstract\rbFIFO'.
Removing unused module `$abstract\srFIFO'.
Removed 4 unused modules.
Module compareFIFOs directly or indirectly contains formal properties -> setting "keep" attribute.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `compareFIFOs.$proc$compareFIFOs.sv:422$6'.
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$ResetCounter.sv:19$171 in module ResetCounter.
Marked 10 switch rules as full_case in process $proc$compareFIFOs.sv:145$108 in module srFIFO.
Marked 3 switch rules as full_case in process $proc$compareFIFOs.sv:282$47 in module rbFIFO.
Removed a total of 0 dead cases.

3.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 34 assignments to connections.

3.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\ResetCounter.$proc$ResetCounter.sv:0$173'.
  Set init value: \count = 0
  Set init value: \flag = 1'0
Found init rule in `\compareFIFOs.$proc$compareFIFOs.sv:0$26'.
  Set init value: $formal$compareFIFOs.sv:452$2_EN = 1'0
Found init rule in `\compareFIFOs.$proc$compareFIFOs.sv:0$24'.
  Set init value: $formal$compareFIFOs.sv:448$1_EN = 1'0
Found init rule in `\compareFIFOs.$proc$compareFIFOs.sv:0$28'.
  Set init value: $formal$compareFIFOs.sv:456$3_EN = 1'0

3.3.5. Executing PROC_ARST pass (detect async resets in processes).

3.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ResetCounter.$proc$ResetCounter.sv:0$173'.
Creating decoders for process `\ResetCounter.$proc$ResetCounter.sv:19$171'.
     1/2: $0\flag[0:0]
     2/2: $0\count[31:0]
Creating decoders for process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
     1/25: $1$memwr$\memRegs$compareFIFOs.sv:168$70_EN[3:0]$164
     2/25: $1$memwr$\memRegs$compareFIFOs.sv:168$70_DATA[3:0]$163
     3/25: $1$memwr$\memRegs$compareFIFOs.sv:168$70_ADDR[2:0]$162
     4/25: $1$memwr$\memRegs$compareFIFOs.sv:165$69_EN[3:0]$160
     5/25: $1$memwr$\memRegs$compareFIFOs.sv:165$69_DATA[3:0]$159
     6/25: $1$memwr$\memRegs$compareFIFOs.sv:165$69_ADDR[2:0]$158
     7/25: $1$memwr$\memRegs$compareFIFOs.sv:162$68_EN[3:0]$156
     8/25: $1$memwr$\memRegs$compareFIFOs.sv:162$68_DATA[3:0]$155
     9/25: $1$memwr$\memRegs$compareFIFOs.sv:162$68_ADDR[2:0]$154
    10/25: $1$memwr$\memRegs$compareFIFOs.sv:159$67_EN[3:0]$152
    11/25: $1$memwr$\memRegs$compareFIFOs.sv:159$67_DATA[3:0]$151
    12/25: $1$memwr$\memRegs$compareFIFOs.sv:159$67_ADDR[2:0]$150
    13/25: $1$memwr$\memRegs$compareFIFOs.sv:156$66_EN[3:0]$148
    14/25: $1$memwr$\memRegs$compareFIFOs.sv:156$66_DATA[3:0]$147
    15/25: $1$memwr$\memRegs$compareFIFOs.sv:156$66_ADDR[2:0]$146
    16/25: $1$memwr$\memRegs$compareFIFOs.sv:153$65_EN[3:0]$144
    17/25: $1$memwr$\memRegs$compareFIFOs.sv:153$65_DATA[3:0]$143
    18/25: $1$memwr$\memRegs$compareFIFOs.sv:153$65_ADDR[2:0]$142
    19/25: $1$memwr$\memRegs$compareFIFOs.sv:150$64_EN[3:0]$140
    20/25: $1$memwr$\memRegs$compareFIFOs.sv:150$64_DATA[3:0]$139
    21/25: $1$memwr$\memRegs$compareFIFOs.sv:150$64_ADDR[2:0]$138
    22/25: $1$memwr$\memRegs$compareFIFOs.sv:147$63_EN[3:0]$136
    23/25: $1$memwr$\memRegs$compareFIFOs.sv:147$63_DATA[3:0]$135
    24/25: $1$memwr$\memRegs$compareFIFOs.sv:147$63_ADDR[2:0]$134
    25/25: $0\tailReg[2:0]
Creating decoders for process `\rbFIFO.$proc$compareFIFOs.sv:282$47'.
     1/5: $1$memwr$\memRegs$compareFIFOs.sv:284$30_EN[3:0]$54
     2/5: $1$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$53
     3/5: $1$memwr$\memRegs$compareFIFOs.sv:284$30_ADDR[2:0]$52
     4/5: $0\headReg[2:0]
     5/5: $0\tailReg[2:0]
Creating decoders for process `\compareFIFOs.$proc$compareFIFOs.sv:0$26'.
Creating decoders for process `\compareFIFOs.$proc$compareFIFOs.sv:0$24'.
Creating decoders for process `\compareFIFOs.$proc$compareFIFOs.sv:446$7'.
     1/6: $0$formal$compareFIFOs.sv:448$1_EN[0:0]$9
     2/6: $0$formal$compareFIFOs.sv:448$1_CHECK[0:0]$8
     3/6: $0$formal$compareFIFOs.sv:452$2_EN[0:0]$11
     4/6: $0$formal$compareFIFOs.sv:452$2_CHECK[0:0]$10
     5/6: $0$formal$compareFIFOs.sv:456$3_EN[0:0]$13
     6/6: $0$formal$compareFIFOs.sv:456$3_CHECK[0:0]$12
Creating decoders for process `\compareFIFOs.$proc$compareFIFOs.sv:0$28'.

3.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ResetCounter.\count' using process `\ResetCounter.$proc$ResetCounter.sv:19$171'.
  created $dff cell `$procdff$299' with positive edge clock.
Creating register for signal `\ResetCounter.\flag' using process `\ResetCounter.$proc$ResetCounter.sv:19$171'.
  created $dff cell `$procdff$300' with positive edge clock.
Creating register for signal `\srFIFO.\tailReg' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$301' with positive edge clock.
Creating register for signal `\srFIFO.\emptyReg' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$302' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:147$63_ADDR' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$303' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:147$63_DATA' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$304' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:147$63_EN' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$305' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:150$64_ADDR' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$306' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:150$64_DATA' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$307' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:150$64_EN' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$308' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:153$65_ADDR' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$309' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:153$65_DATA' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$310' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:153$65_EN' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$311' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:156$66_ADDR' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$312' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:156$66_DATA' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$313' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:156$66_EN' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$314' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:159$67_ADDR' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$315' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:159$67_DATA' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$316' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:159$67_EN' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$317' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:162$68_ADDR' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$318' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:162$68_DATA' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$319' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:162$68_EN' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$320' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:165$69_ADDR' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$321' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:165$69_DATA' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$322' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:165$69_EN' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$323' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:168$70_ADDR' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$324' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:168$70_DATA' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$325' with positive edge clock.
Creating register for signal `\srFIFO.$memwr$\memRegs$compareFIFOs.sv:168$70_EN' using process `\srFIFO.$proc$compareFIFOs.sv:145$108'.
  created $dff cell `$procdff$326' with positive edge clock.
Creating register for signal `\rbFIFO.\tailReg' using process `\rbFIFO.$proc$compareFIFOs.sv:282$47'.
  created $dff cell `$procdff$327' with positive edge clock.
Creating register for signal `\rbFIFO.\headReg' using process `\rbFIFO.$proc$compareFIFOs.sv:282$47'.
  created $dff cell `$procdff$328' with positive edge clock.
Creating register for signal `\rbFIFO.\emptyReg' using process `\rbFIFO.$proc$compareFIFOs.sv:282$47'.
  created $dff cell `$procdff$329' with positive edge clock.
Creating register for signal `\rbFIFO.$memwr$\memRegs$compareFIFOs.sv:284$30_ADDR' using process `\rbFIFO.$proc$compareFIFOs.sv:282$47'.
  created $dff cell `$procdff$330' with positive edge clock.
Creating register for signal `\rbFIFO.$memwr$\memRegs$compareFIFOs.sv:284$30_DATA' using process `\rbFIFO.$proc$compareFIFOs.sv:282$47'.
  created $dff cell `$procdff$331' with positive edge clock.
Creating register for signal `\rbFIFO.$memwr$\memRegs$compareFIFOs.sv:284$30_EN' using process `\rbFIFO.$proc$compareFIFOs.sv:282$47'.
  created $dff cell `$procdff$332' with positive edge clock.
Creating register for signal `\compareFIFOs.$formal$compareFIFOs.sv:448$1_CHECK' using process `\compareFIFOs.$proc$compareFIFOs.sv:446$7'.
  created $dff cell `$procdff$333' with positive edge clock.
Creating register for signal `\compareFIFOs.$formal$compareFIFOs.sv:448$1_EN' using process `\compareFIFOs.$proc$compareFIFOs.sv:446$7'.
  created $dff cell `$procdff$334' with positive edge clock.
Creating register for signal `\compareFIFOs.$formal$compareFIFOs.sv:452$2_CHECK' using process `\compareFIFOs.$proc$compareFIFOs.sv:446$7'.
  created $dff cell `$procdff$335' with positive edge clock.
Creating register for signal `\compareFIFOs.$formal$compareFIFOs.sv:452$2_EN' using process `\compareFIFOs.$proc$compareFIFOs.sv:446$7'.
  created $dff cell `$procdff$336' with positive edge clock.
Creating register for signal `\compareFIFOs.$formal$compareFIFOs.sv:456$3_CHECK' using process `\compareFIFOs.$proc$compareFIFOs.sv:446$7'.
  created $dff cell `$procdff$337' with positive edge clock.
Creating register for signal `\compareFIFOs.$formal$compareFIFOs.sv:456$3_EN' using process `\compareFIFOs.$proc$compareFIFOs.sv:446$7'.
  created $dff cell `$procdff$338' with positive edge clock.

3.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `ResetCounter.$proc$ResetCounter.sv:0$173'.
Found and cleaned up 2 empty switches in `\ResetCounter.$proc$ResetCounter.sv:19$171'.
Removing empty process `ResetCounter.$proc$ResetCounter.sv:19$171'.
Found and cleaned up 13 empty switches in `\srFIFO.$proc$compareFIFOs.sv:145$108'.
Removing empty process `srFIFO.$proc$compareFIFOs.sv:145$108'.
Found and cleaned up 6 empty switches in `\rbFIFO.$proc$compareFIFOs.sv:282$47'.
Removing empty process `rbFIFO.$proc$compareFIFOs.sv:282$47'.
Removing empty process `compareFIFOs.$proc$compareFIFOs.sv:0$26'.
Removing empty process `compareFIFOs.$proc$compareFIFOs.sv:0$24'.
Found and cleaned up 3 empty switches in `\compareFIFOs.$proc$compareFIFOs.sv:446$7'.
Removing empty process `compareFIFOs.$proc$compareFIFOs.sv:446$7'.
Removing empty process `compareFIFOs.$proc$compareFIFOs.sv:0$28'.
Cleaned up 24 empty switches.

3.3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module srFIFO.
<suppressed ~12 debug messages>
Optimizing module rbFIFO.
<suppressed ~2 debug messages>
Optimizing module compareFIFOs.

3.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module srFIFO.
Optimizing module rbFIFO.
Optimizing module compareFIFOs.

3.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \srFIFO..
Finding unused cells or wires in module \rbFIFO..
Finding unused cells or wires in module \compareFIFOs..
Removed 37 unused cells and 209 unused wires.
<suppressed ~48 debug messages>

3.6. Executing CHECK pass (checking for obvious problems).
Checking module ResetCounter...
Checking module compareFIFOs...
Checking module rbFIFO...
Checking module srFIFO...
Found and reported 0 problems.

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module compareFIFOs.
Optimizing module rbFIFO.
Optimizing module srFIFO.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\compareFIFOs'.
<suppressed ~6 debug messages>
Finding identical cells in module `\rbFIFO'.
<suppressed ~27 debug messages>
Finding identical cells in module `\srFIFO'.
<suppressed ~39 debug messages>
Removed a total of 24 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ResetCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \compareFIFOs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rbFIFO..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \srFIFO..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ResetCounter.
  Optimizing cells in module \compareFIFOs.
  Optimizing cells in module \rbFIFO.
    Consolidated identical input bits for $mux cell $procmux$267:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:284$30_EN[3:0]$50
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:284$30_EN[3:0]$50 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:284$30_EN[3:0]$50 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:284$30_EN[3:0]$50 [0] $0$memwr$\memRegs$compareFIFOs.sv:284$30_EN[3:0]$50 [0] $0$memwr$\memRegs$compareFIFOs.sv:284$30_EN[3:0]$50 [0] }
  Optimizing cells in module \rbFIFO.
  Optimizing cells in module \srFIFO.
    Consolidated identical input bits for $mux cell $procmux$183:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:168$70_EN[3:0]$132
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:168$70_EN[3:0]$132 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:168$70_EN[3:0]$132 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:168$70_EN[3:0]$132 [0] $0$memwr$\memRegs$compareFIFOs.sv:168$70_EN[3:0]$132 [0] $0$memwr$\memRegs$compareFIFOs.sv:168$70_EN[3:0]$132 [0] }
    Consolidated identical input bits for $mux cell $procmux$192:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:165$69_EN[3:0]$129
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:165$69_EN[3:0]$129 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:165$69_EN[3:0]$129 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:165$69_EN[3:0]$129 [0] $0$memwr$\memRegs$compareFIFOs.sv:165$69_EN[3:0]$129 [0] $0$memwr$\memRegs$compareFIFOs.sv:165$69_EN[3:0]$129 [0] }
    Consolidated identical input bits for $mux cell $procmux$201:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:162$68_EN[3:0]$126
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:162$68_EN[3:0]$126 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:162$68_EN[3:0]$126 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:162$68_EN[3:0]$126 [0] $0$memwr$\memRegs$compareFIFOs.sv:162$68_EN[3:0]$126 [0] $0$memwr$\memRegs$compareFIFOs.sv:162$68_EN[3:0]$126 [0] }
    Consolidated identical input bits for $mux cell $procmux$210:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:159$67_EN[3:0]$123
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:159$67_EN[3:0]$123 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:159$67_EN[3:0]$123 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:159$67_EN[3:0]$123 [0] $0$memwr$\memRegs$compareFIFOs.sv:159$67_EN[3:0]$123 [0] $0$memwr$\memRegs$compareFIFOs.sv:159$67_EN[3:0]$123 [0] }
    Consolidated identical input bits for $mux cell $procmux$219:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:156$66_EN[3:0]$120
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:156$66_EN[3:0]$120 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:156$66_EN[3:0]$120 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:156$66_EN[3:0]$120 [0] $0$memwr$\memRegs$compareFIFOs.sv:156$66_EN[3:0]$120 [0] $0$memwr$\memRegs$compareFIFOs.sv:156$66_EN[3:0]$120 [0] }
    Consolidated identical input bits for $mux cell $procmux$228:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:153$65_EN[3:0]$117
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:153$65_EN[3:0]$117 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:153$65_EN[3:0]$117 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:153$65_EN[3:0]$117 [0] $0$memwr$\memRegs$compareFIFOs.sv:153$65_EN[3:0]$117 [0] $0$memwr$\memRegs$compareFIFOs.sv:153$65_EN[3:0]$117 [0] }
    Consolidated identical input bits for $mux cell $procmux$237:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:150$64_EN[3:0]$114
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:150$64_EN[3:0]$114 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:150$64_EN[3:0]$114 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:150$64_EN[3:0]$114 [0] $0$memwr$\memRegs$compareFIFOs.sv:150$64_EN[3:0]$114 [0] $0$memwr$\memRegs$compareFIFOs.sv:150$64_EN[3:0]$114 [0] }
    Consolidated identical input bits for $mux cell $procmux$246:
      Old ports: A=4'0000, B=4'1111, Y=$0$memwr$\memRegs$compareFIFOs.sv:147$63_EN[3:0]$111
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memRegs$compareFIFOs.sv:147$63_EN[3:0]$111 [0]
      New connections: $0$memwr$\memRegs$compareFIFOs.sv:147$63_EN[3:0]$111 [3:1] = { $0$memwr$\memRegs$compareFIFOs.sv:147$63_EN[3:0]$111 [0] $0$memwr$\memRegs$compareFIFOs.sv:147$63_EN[3:0]$111 [0] $0$memwr$\memRegs$compareFIFOs.sv:147$63_EN[3:0]$111 [0] }
  Optimizing cells in module \srFIFO.
Performed a total of 9 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\compareFIFOs'.
<suppressed ~6 debug messages>
Finding identical cells in module `\rbFIFO'.
Finding identical cells in module `\srFIFO'.
<suppressed ~21 debug messages>
Removed a total of 9 cells.

3.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \compareFIFOs..
Finding unused cells or wires in module \rbFIFO..
Finding unused cells or wires in module \srFIFO..
Removed 0 unused cells and 26 unused wires.
<suppressed ~3 debug messages>

3.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module compareFIFOs.
Optimizing module rbFIFO.
Optimizing module srFIFO.

3.7.8. Rerunning OPT passes. (Maybe there is more to do..)

3.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ResetCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \compareFIFOs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rbFIFO..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \srFIFO..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

3.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ResetCounter.
  Optimizing cells in module \compareFIFOs.
  Optimizing cells in module \rbFIFO.
  Optimizing cells in module \srFIFO.
Performed a total of 0 changes.

3.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\compareFIFOs'.
Finding identical cells in module `\rbFIFO'.
Finding identical cells in module `\srFIFO'.
Removed a total of 0 cells.

3.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \compareFIFOs..
Finding unused cells or wires in module \rbFIFO..
Finding unused cells or wires in module \srFIFO..

3.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module compareFIFOs.
Optimizing module rbFIFO.
Optimizing module srFIFO.

3.7.14. Finished OPT passes. (There is nothing left to do.)

3.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell ResetCounter.$add$ResetCounter.sv:24$172 ($add).
Removed top 2 bits (of 3) from port B of cell rbFIFO.$add$compareFIFOs.sv:266$32 ($add).
Removed top 2 bits (of 3) from port B of cell rbFIFO.$add$compareFIFOs.sv:268$34 ($add).
Removed top 2 bits (of 3) from port B of cell srFIFO.$add$compareFIFOs.sv:79$73 ($add).
Removed top 2 bits (of 3) from port B of cell srFIFO.$sub$compareFIFOs.sv:82$77 ($sub).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \compareFIFOs..
Finding unused cells or wires in module \rbFIFO..
Finding unused cells or wires in module \srFIFO..

3.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module compareFIFOs.
Optimizing module rbFIFO.
Optimizing module srFIFO.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\compareFIFOs'.
Finding identical cells in module `\rbFIFO'.
Finding identical cells in module `\srFIFO'.
Removed a total of 0 cells.

3.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \compareFIFOs..
Finding unused cells or wires in module \rbFIFO..
Finding unused cells or wires in module \srFIFO..

3.11.4. Finished fast OPT passes.

3.12. Printing statistics.

=== ResetCounter ===

   Number of wires:                 10
   Number of wire bits:            165
   Number of public wires:           6
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $add                            1
     $dff                            2
     $mux                            3

=== compareFIFOs ===

   Number of wires:                 42
   Number of wire bits:             88
   Number of public wires:          27
   Number of public wire bits:      73
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     $and                            3
     $assert                         3
     $dff                            5
     $eq                             2
     $mux                            5
     $not                            2
     ResetCounter                    1
     rbFIFO                          1
     srFIFO                          1

=== rbFIFO ===

   Number of wires:                 37
   Number of wire bits:             79
   Number of public wires:          25
   Number of public wire bits:      49
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 25
     $add                            2
     $and                            3
     $dff                            3
     $eq                             2
     $mem_v2                         1
     $mux                           10
     $not                            2
     $or                             2

=== srFIFO ===

   Number of wires:                 92
   Number of wire bits:            237
   Number of public wires:          68
   Number of public wire bits:     160
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 38
     $add                            1
     $and                            2
     $dff                            2
     $eq                             1
     $logic_not                      1
     $mem_v2                         1
     $mux                           24
     $not                            2
     $or                             3
     $sub                            1

=== design hierarchy ===

   compareFIFOs                      1
     ResetCounter                    1
     rbFIFO                          1
     srFIFO                          1

   Number of wires:                181
   Number of wire bits:            569
   Number of public wires:         126
   Number of public wire bits:     350
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $add                            4
     $and                            8
     $assert                         3
     $dff                           12
     $eq                             5
     $logic_not                      1
     $mem_v2                         2
     $mux                           42
     $not                            6
     $or                             5
     $sub                            1

3.13. Executing CHECK pass (checking for obvious problems).
Checking module ResetCounter...
Checking module compareFIFOs...
Checking module rbFIFO...
Checking module srFIFO...
Found and reported 0 problems.

4. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \memRegs in module \rbFIFO:
  created 8 $dff cells and 0 static cells of width 4.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 8 write mux blocks.
Mapping memory \memRegs in module \srFIFO:
  created 8 $dff cells and 0 static cells of width 4.
  read interface: 0 $dff and 56 $mux cells.
  write interface: 64 write mux blocks.

5. Executing ASYNC2SYNC pass.

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \compareFIFOs..
Finding unused cells or wires in module \rbFIFO..
Finding unused cells or wires in module \srFIFO..
Removed 0 unused cells and 88 unused wires.
<suppressed ~2 debug messages>

7. Executing SETUNDEF pass (replace undef values with defined constants).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module compareFIFOs.
Optimizing module rbFIFO.
<suppressed ~6 debug messages>
Optimizing module srFIFO.
<suppressed ~97 debug messages>

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\compareFIFOs'.
Finding identical cells in module `\rbFIFO'.
Finding identical cells in module `\srFIFO'.
Removed a total of 0 cells.

8.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$300 ($dff) from module ResetCounter (D = 1'1, Q = \flag).
Adding SRST signal on $procdff$299 ($dff) from module ResetCounter (D = $procmux$177_Y, Q = \count, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$1224 ($sdff) from module ResetCounter (D = $add$ResetCounter.sv:24$172_Y, Q = \count).
Adding SRST signal on $procdff$335 ($dff) from module compareFIFOs (D = $auto$rtlil.cc:3097:Anyseq$1184, Q = $formal$compareFIFOs.sv:452$2_CHECK, rval = 1'1).
Adding SRST signal on $procdff$328 ($dff) from module rbFIFO (D = $procmux$275_Y, Q = \headReg, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$1227 ($sdff) from module rbFIFO (D = \_headReg_T_1, Q = \headReg).
Adding SRST signal on $procdff$327 ($dff) from module rbFIFO (D = $procmux$282_Y, Q = \tailReg, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$1229 ($sdff) from module rbFIFO (D = \_tailReg_T_1, Q = \tailReg).
Adding EN signal on $memory\memRegs[7]$362 ($dff) from module rbFIFO (D = $0$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$49, Q = \memRegs[7]).
Adding EN signal on $memory\memRegs[6]$360 ($dff) from module rbFIFO (D = $0$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$49, Q = \memRegs[6]).
Adding EN signal on $memory\memRegs[5]$358 ($dff) from module rbFIFO (D = $0$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$49, Q = \memRegs[5]).
Adding EN signal on $memory\memRegs[4]$356 ($dff) from module rbFIFO (D = $0$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$49, Q = \memRegs[4]).
Adding EN signal on $memory\memRegs[3]$354 ($dff) from module rbFIFO (D = $0$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$49, Q = \memRegs[3]).
Adding EN signal on $memory\memRegs[2]$352 ($dff) from module rbFIFO (D = $0$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$49, Q = \memRegs[2]).
Adding EN signal on $memory\memRegs[1]$350 ($dff) from module rbFIFO (D = $0$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$49, Q = \memRegs[1]).
Adding EN signal on $memory\memRegs[0]$348 ($dff) from module rbFIFO (D = $0$memwr$\memRegs$compareFIFOs.sv:284$30_DATA[3:0]$49, Q = \memRegs[0]).
Adding SRST signal on $procdff$301 ($dff) from module srFIFO (D = $procmux$261_Y, Q = \tailReg, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$1243 ($sdff) from module srFIFO (D = $procmux$261_Y, Q = \tailReg).
Adding EN signal on $memory\memRegs[7]$467 ($dff) from module srFIFO (D = $memory\memRegs$wrmux[7][7][0]$y$1180, Q = \memRegs[7]).
Adding EN signal on $memory\memRegs[6]$465 ($dff) from module srFIFO (D = $memory\memRegs$wrmux[6][7][0]$y$1132, Q = \memRegs[6]).
Adding EN signal on $memory\memRegs[5]$463 ($dff) from module srFIFO (D = $memory\memRegs$wrmux[5][7][0]$y$1068, Q = \memRegs[5]).
Adding EN signal on $memory\memRegs[4]$461 ($dff) from module srFIFO (D = $memory\memRegs$wrmux[4][7][0]$y$1020, Q = \memRegs[4]).
Adding EN signal on $memory\memRegs[3]$459 ($dff) from module srFIFO (D = $memory\memRegs$wrmux[3][7][0]$y$940, Q = \memRegs[3]).
Adding EN signal on $memory\memRegs[2]$457 ($dff) from module srFIFO (D = $memory\memRegs$wrmux[2][7][0]$y$892, Q = \memRegs[2]).
Adding EN signal on $memory\memRegs[1]$455 ($dff) from module srFIFO (D = $memory\memRegs$wrmux[1][7][0]$y$812, Q = \memRegs[1]).
Adding EN signal on $memory\memRegs[0]$453 ($dff) from module srFIFO (D = $memory\memRegs$wrmux[0][7][0]$y$748, Q = \memRegs[0]).

8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \compareFIFOs..
Finding unused cells or wires in module \rbFIFO..
Finding unused cells or wires in module \srFIFO..
Removed 18 unused cells and 87 unused wires.
<suppressed ~22 debug messages>

8.5. Rerunning OPT passes. (Removed registers in this run.)

8.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module ResetCounter.
Optimizing module compareFIFOs.
Optimizing module rbFIFO.
Optimizing module srFIFO.
<suppressed ~9 debug messages>

8.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ResetCounter'.
Finding identical cells in module `\compareFIFOs'.
Finding identical cells in module `\rbFIFO'.
Finding identical cells in module `\srFIFO'.
Removed a total of 0 cells.

8.8. Executing OPT_DFF pass (perform DFF optimizations).

8.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ResetCounter..
Finding unused cells or wires in module \compareFIFOs..
Finding unused cells or wires in module \rbFIFO..
Finding unused cells or wires in module \srFIFO..

8.10. Finished fast OPT passes.

9. Executing CHECK pass (checking for obvious problems).
Checking module ResetCounter...
Checking module compareFIFOs...
Checking module rbFIFO...
Checking module srFIFO...
Found and reported 0 problems.

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \compareFIFOs
Used module:     \rbFIFO
Used module:     \ResetCounter
Used module:     \srFIFO

10.2. Analyzing design hierarchy..
Top module:  \compareFIFOs
Used module:     \rbFIFO
Used module:     \ResetCounter
Used module:     \srFIFO
Removed 0 unused modules.
Module compareFIFOs directly or indirectly contains formal properties -> setting "keep" attribute.

11. Executing RTLIL backend.
Output filename: ../model/design_nomem.il

End of script. Logfile hash: 2d6f870123, CPU: user 0.07s system 0.01s
Yosys 0.12 (git sha1 UNKNOWN, clang 13.0.0 -fPIC -Os)
Time spent: 22% 8x opt_clean (0 sec), 18% 8x opt_expr (0 sec), ...
